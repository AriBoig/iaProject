Engine: Metamorphosis
InputVariable: healthRobot
 enabled: true
 range: 0 100
 lock-range: false
 term: destroyed Trapezoid 0 0 5 15
 term: hurt Trapezoid 5 15 50 60
 term: healthy Trapezoid 50 60 100 400
InputVariable: mMetamorphosis
 enabled: true
 range: 0 100
 lock-range: false
 term: limited Trapezoid 0 0 1 5
 term: small Trapezoid 1 5 10 15
 term: medium Trapezoid 10 15 50 60
 term: large Trapezoid 50 60 75 85
 term: important Trapezoid 75 85 100 100
OutputVariable: healthRobot
  enabled: true
  range: 0 100
  lock-range: false
  aggregation: Maximum
  defuzzifier: SmallestOfMaximum 100
  default: nan
  lock-previous: false
  term: destroyed Trapezoid 0 0 5 15
  term: hurt Trapezoid 5 15 50 60
  term: healthy Trapezoid 50 60 100 400
RuleBlock: mamdani
 enabled: true
 conjunction: AlgebraicProduct
 disjunction: none
 implication: AlgebraicProduct
 activation: General
 rule: if mMetamorphosis is limited and cell is impassableArea then healthRobot is destroyed
 rule: if mMetamorphosis is limited and cell is not impassableArea then healthRobot is healthy
 rule: if mMetamorphosis is small and cell is impassableArea then healthRobot is destroyed
 rule: if mMetamorphosis is small and cell is not impassableArea then healthRobot is healthy
 rule: if mMetamorphosis is medium and cell is impassableArea then healthRobot is destroyed
 rule: if mMetamorphosis is medium and cell is not impassableArea then healthRobot is hurt
 rule: if mMetamorphosis is large and cell is impassableArea then healthRobot is destroyed
 rule: if mMetamorphosis is large and cell is not impassableArea then healthRobot is hurt
 rule: if mMetamorphosis is important and cell is impassableArea then healthRobot is destroyed
 rule: if mMetamorphosis is important and cell is not impassableArea healthRobot robot is destroyed